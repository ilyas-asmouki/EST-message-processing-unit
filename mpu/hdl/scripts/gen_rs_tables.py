#!/usr/bin/env python3
# mpu/hdl/scripts/gen_rs_tables.py
# generate lookup tables and generator polynomial for RS encoder HDL

import sys
import os

# Add parent directory to path to import model
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../..'))

from mpu.model.reed_solomon import exp, log, _GEN, n, k, two_t

def write_mem_file(filename, data, width=8):
    """Write data to .mem file in hex format for $readmemh"""
    with open(filename, 'w') as f:
        for i, val in enumerate(data):
            f.write(f"{val:0{width//4}X}\n")
    print(f"Generated {filename}: {len(data)} entries")

def write_sv_params(filename):
    """Write SystemVerilog package with RS parameters and tables"""
    with open(filename, 'w') as f:
        f.write("// Auto-generated from Python model - DO NOT EDIT\n")
        f.write("// Generated by: gen_rs_tables.py\n\n")
        f.write("package rs_params_pkg;\n\n")
        
        # Parameters
        f.write(f"    parameter int N = {n};\n")
        f.write(f"    parameter int K = {k};\n")
        f.write(f"    parameter int NSYM = {two_t};\n")
        f.write(f"    parameter int M = 8;\n\n")
        
        # Generator polynomial coefficients
        f.write("    // Generator polynomial coefficients g(x)\n")
        f.write("    // Indexed from g[0] (constant term) to g[NSYM] (x^NSYM coefficient)\n")
        f.write(f"    parameter logic [7:0] GEN_POLY [0:{len(_GEN)-1}] = '{{\n")
        for i in range(0, len(_GEN), 8):
            chunk = _GEN[i:i+8]
            hex_strs = [f"8'h{val:02X}" for val in chunk]
            f.write(f"        {', '.join(hex_strs)}")
            if i + 8 < len(_GEN):
                f.write(",")
            f.write("\n")
        f.write("    };\n\n")
        
        # GF tables
        f.write("    // GF(256) exponential table (antilog)\n")
        f.write("    // exp[i] = alpha^i, duplicated for wrap-around\n")
        f.write(f"    parameter logic [7:0] GF_EXP [0:{len(exp)-1}] = '{{\n")
        for i in range(0, len(exp), 16):
            chunk = exp[i:i+16]
            hex_strs = [f"8'h{val:02X}" for val in chunk]
            f.write(f"        {', '.join(hex_strs)}")
            if i + 16 < len(exp):
                f.write(",")
            f.write("\n")
        f.write("    };\n\n")
        
        f.write("    // GF(256) logarithm table\n")
        f.write("    // log[exp[i]] = i\n")
        f.write(f"    parameter logic [7:0] GF_LOG [0:{len(log)-1}] = '{{\n")
        for i in range(0, len(log), 16):
            chunk = log[i:i+16]
            hex_strs = [f"8'h{val:02X}" for val in chunk]
            f.write(f"        {', '.join(hex_strs)}")
            if i + 16 < len(log):
                f.write(",")
            f.write("\n")
        f.write("    };\n\n")
        
        f.write("endpackage\n")
    
    print(f"Generated {filename}")

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    output_dir = os.path.join(script_dir, '../rtl/reed_solomon')
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate SystemVerilog package
    sv_file = os.path.join(output_dir, 'rs_params_pkg.sv')
    write_sv_params(sv_file)
    
    # Also generate .mem files for optional $readmemh usage
    mem_dir = os.path.join(script_dir, '../sim/mem')
    os.makedirs(mem_dir, exist_ok=True)
    
    write_mem_file(os.path.join(mem_dir, 'gf_exp.mem'), exp)
    write_mem_file(os.path.join(mem_dir, 'gf_log.mem'), log)
    write_mem_file(os.path.join(mem_dir, 'gen_poly.mem'), _GEN)
    
    print("\nâœ“ All RS tables generated successfully")
    print(f"  - N={n}, K={k}, NSYM={two_t}")
    print(f"  - Generator polynomial: {len(_GEN)} coefficients")
    print(f"  - GF tables: {len(exp)} exp entries, {len(log)} log entries")

if __name__ == "__main__":
    main()